package cz.muni.fi.crocs.smpc_rsa_proxy.proxies;

import cz.muni.fi.crocs.smpc_rsa_proxy.cardTools.Util;

import javax.smartcardio.CardException;
import javax.smartcardio.CommandAPDU;

import java.io.FileNotFoundException;
import java.io.IOException;

import java.util.ArrayList;
import java.util.List;

/**
 * The {@link ClientSignProxy} class represents a signature-only
 * client party in the SMPC RSA scheme.
 *
 * @author Lukas Zaoral
 */
public class ClientSignProxy extends AbstractClientProxy {

    private static final byte CLA_RSA_SMPC_CLIENT_SIGN = (byte) 0x80;

    /**
     * Instruction codes
     */
    private static final byte INS_SET_KEYS = 0x10;
    private static final byte INS_SET_MESSAGE = 0x12;
    private static final byte INS_SIGNATURE = 0x14;
    private static final byte INS_RESET = 0x16;

    /**
     * P1 parameters of the INS_SET_KEYS instruction
     */
    private static final byte P1_SET_D1_CLIENT = 0x00;
    private static final byte P1_SET_N1 = 0x01;

    /**
     * Applet ID
     */
    private static final String APPLET_AID = "0102030405060708090102";

    /**
     * Connects to a card a selects the client-sign applet.
     *
     * @throws CardException if the terminal or card are missing
     *                       or the applet is not installed
     */
    public ClientSignProxy() throws CardException {
        super(Util.hexStringToByteArray(APPLET_AID));
    }

    @Override
    public void generateKeys() throws IOException, CardException {
        setClientKeys();
    }

    @Override
    public void signMessage() throws IOException, CardException {
        clientSignMessage(CLA_RSA_SMPC_CLIENT_SIGN, INS_SET_MESSAGE, INS_SIGNATURE);
    }

    @Override
    public void reset() throws CardException {
        resetHelper(CLA_RSA_SMPC_CLIENT_SIGN, INS_RESET);
    }

    /**
     * Sets the keys generated by the reference implementation to the card.
     *
     * @throws IOException   if the file with keys is missing or cannot be read
     * @throws CardException if something on the smart card fails
     */
    public void setClientKeys() throws IOException, CardException {
        List<CommandAPDU> cmdD1Client = new ArrayList<>();
        List<CommandAPDU> cmdN1 = new ArrayList<>();

        loadClientKeys(cmdD1Client, cmdN1);

        printAndFlush("Transmitting keys...");
        int res = transmitBatch(cmdD1Client, "Set D'1", SW_COMMAND_NOT_ALLOWED).get(0).getSW();
        if (res == SW_COMMAND_NOT_ALLOWED)
            throw new CardException("Keys have already been set. Please, reset the card first.");

        transmitBatch(cmdN1, "Set N1");
        printOK();
    }

    /**
     * Loads the client keys to the given {@code cmdD1Client} and {@code cmdN1} lists.
     *
     * @param cmdD1Client list of commands to set the client private exponent share
     * @param cmdN1       list of commands to set the client partial modulus
     * @throws IOException if the file with keys is missing or cannot be read
     */
    private void loadClientKeys(List<CommandAPDU> cmdD1Client, List<CommandAPDU> cmdN1) throws IOException {
        printAndFlush("Loading keys...");

        try {
            loadFile(CLIENT_KEYS_CLIENT_SHARE_FILE, cmdD1Client, cmdN1, CLA_RSA_SMPC_CLIENT_SIGN, INS_SET_KEYS,
                    P1_SET_D1_CLIENT, P1_SET_N1);
        } catch (FileNotFoundException e) {
            System.err.println("The keys have not been generated. Run the reference implementation first.");
            throw e;
        }

        printOK();
    }

}
